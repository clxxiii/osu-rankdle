// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Video {
  id                String   @id @default(uuid())
  youtube_id        String
  shown_rank        Int
  user              User     @relation(fields: [user_id], references: [id])
  user_id           Int
  current_video_for Stats[]
  guesses_for       Guess[]
  removed           Boolean  @default(false)
  reports           Report[]
}

model User {
  id                              Int       @id
  username                        String
  country_code                    String
  rank                            Int
  last_stats_update               DateTime  @default(now())
  videos                          Video[]
  stats                           Stats?    @relation(fields: [stats_id], references: [id])
  stats_id                        String?   @unique
  oauth                           OsuOauth?
  removed_from_global_leaderboard Boolean   @default(false)
  admin                           Boolean   @default(false)
}

model OsuOauth {
  access_token  String
  refresh_token String
  expires_in    DateTime
  token_type    String

  user    User @relation(fields: [user_id], references: [id])
  user_id Int  @unique
}

model Session {
  id       String @id @default(uuid())
  stats    Stats  @relation(fields: [stats_id], references: [id])
  stats_id String

  state String? @unique // This property is used against XSS. Once verified, it is not used again.
}

model Stats {
  id               String    @id @default(uuid())
  streak           Int
  longest_streak   Int
  highest_score    Int
  played_today     Boolean
  user             User?
  hp               Int       @default(2000)
  sessions         Session[]
  current_video    Video?    @relation(fields: [current_video_id], references: [id])
  current_video_id String?
  history          UserDay[]
  guesses          Guess[]
  reports          Report[]
}

model UserDay {
  stats    Stats   @relation(fields: [stats_id], references: [id])
  stats_id String
  day      Int
  guesses  Guess[]

  @@id([day, stats_id])
}

model Guess {
  id              String   @id @default(uuid())
  stats           Stats    @relation(fields: [stats_id], references: [id])
  video           Video    @relation(fields: [video_id], references: [id])
  time            DateTime @default(now())
  guess_num       Int
  input           Int
  penalty         Int
  day             Int
  video_id        String
  stats_id        String
  on_day          UserDay  @relation(fields: [day, on_day_stats_id], references: [day, stats_id])
  on_day_stats_id String
}

model Report {
  id       String @id @default(uuid())
  video    Video  @relation(fields: [video_id], references: [id])
  user     Stats  @relation(fields: [stats_id], references: [id])
  reason   String
  video_id String
  stats_id String
}
